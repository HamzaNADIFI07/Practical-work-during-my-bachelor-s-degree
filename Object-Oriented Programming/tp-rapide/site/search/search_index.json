{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TP tri rapide","text":""},{"location":"#etat-du-tp","title":"\u00c9tat du TP","text":"<p>D\u00e9crivez ici l'\u00e9tat d'avancement du TP.</p>"},{"location":"#reponses-aux-questions","title":"R\u00e9ponses aux questions","text":"<p>Indiquez ici les r\u00e9ponses aux questions pos\u00e9es dans le TP. Vous reprendrez le num\u00e9ro de la section et le num\u00e9ro de la question. Par exemple pour r\u00e9pondre \u00e0 la question 3 de la section 2.4 vous indiquerez :</p>"},{"location":"#question-243","title":"Question 2.4.3","text":""},{"location":"modules/","title":"Modules pour le TP sur le tri rapide","text":""},{"location":"modules/#module-element","title":"Module <code>Element</code>","text":""},{"location":"modules/#element.Element","title":"<code>Element</code>","text":"<p>An Element has a value and can be compared to another Element.</p> Source code in <code>src/element.py</code> <pre><code>@total_ordering\nclass Element:\n    '''\n    An Element has a value and can be compared to another Element.\n    '''\n\n    def __init__(self,value):\n        assert(type(value) == int)\n        self.value = value\n\n    def __add__ (self, other):\n        return Element(self.value + other.value)\n\n    def __eq__(self, other):\n        return self.value == other.value\n\n    def __ne__(self, other):\n        return not (self == other)\n\n    def __lt__(self, other):\n        return self.value &lt; other.value\n\n    def __repr__(self):\n        return \"{}\".format(self.value)\n\n    def cmp (self,other):\n        \"\"\"\n        Compares this element and `other`.\n\n        Args:\n          other (Element): The other Element\n\n        Returns:\n          int: -1, 0 or 1 resp. if `self &lt; other`, `self` = `other` or `self` &gt; `other`\n\n        Examples:\n          &gt;&gt;&gt; Element(45).cmp(Element(234))\n          -1\n          &gt;&gt;&gt; Element(45).cmp(Element(45))\n          0\n          &gt;&gt;&gt; Element(45).cmp(Element(24))\n          1\n        \"\"\"\n        if self.value == other.value:\n            return 0\n        elif self.value &lt; other.value:\n            return -1\n        else:\n            return 1\n</code></pre>"},{"location":"modules/#element.Element.cmp","title":"<code>cmp(other)</code>","text":"<p>Compares this element and <code>other</code>.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Element</code> <p>The other Element</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>-1, 0 or 1 resp. if <code>self &lt; other</code>, <code>self</code> = <code>other</code> or <code>self</code> &gt; <code>other</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Element(45).cmp(Element(234))\n-1\n&gt;&gt;&gt; Element(45).cmp(Element(45))\n0\n&gt;&gt;&gt; Element(45).cmp(Element(24))\n1\n</code></pre> Source code in <code>src/element.py</code> <pre><code>def cmp (self,other):\n    \"\"\"\n    Compares this element and `other`.\n\n    Args:\n      other (Element): The other Element\n\n    Returns:\n      int: -1, 0 or 1 resp. if `self &lt; other`, `self` = `other` or `self` &gt; `other`\n\n    Examples:\n      &gt;&gt;&gt; Element(45).cmp(Element(234))\n      -1\n      &gt;&gt;&gt; Element(45).cmp(Element(45))\n      0\n      &gt;&gt;&gt; Element(45).cmp(Element(24))\n      1\n    \"\"\"\n    if self.value == other.value:\n        return 0\n    elif self.value &lt; other.value:\n        return -1\n    else:\n        return 1\n</code></pre>"},{"location":"modules/#module-generate","title":"Module <code>Generate</code>","text":"<p>Module that provides useful functions for the quicksort</p> Author <p>Dpt Informatique - FST - Univ. Lille 2016, january</p>"},{"location":"modules/#generate.decreasing_array","title":"<code>decreasing_array(n)</code>","text":"<p>Creates a fresh array of Elements in decreasing order.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The length of the array</p> required <p>Returns:</p> Type Description <p>NumPy array: An array of Element from n-1 to 0</p> Example <p>print(decreasing_array(3)) [2 1 0]</p> Source code in <code>src/generate.py</code> <pre><code>def decreasing_array(n):\n    \"\"\"\n    Creates a fresh array of Elements in decreasing order.\n\n    Args:\n      n (int): The length of the array\n\n    Returns:\n      NumPy array: An array of Element from n-1 to 0\n\n    Example:\n      &gt;&gt;&gt; print(decreasing_array(3))\n      [2 1 0]\n    \"\"\"\n    return np.array([Element(i) for i in reversed(range(n))])\n</code></pre>"},{"location":"modules/#generate.increasing_array","title":"<code>increasing_array(n)</code>","text":"<p>Creates a fresh array of Elements in increasing order.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The length of the array</p> required <p>Returns:</p> Type Description <p>NumPy array: An array of Element from 0 to n-1</p> Example <p>print(increasing_array(3)) [0 1 2]</p> Source code in <code>src/generate.py</code> <pre><code>def increasing_array(n):\n    \"\"\"\n    Creates a fresh array of Elements in increasing order.\n\n    Args:\n      n (int): The length of the array\n\n    Returns:\n      NumPy array: An array of Element from 0 to n-1\n\n    Example:\n      &gt;&gt;&gt; print(increasing_array(3))\n      [0 1 2]\n    \"\"\"\n    return np.array([Element(i) for i in range(n)])\n</code></pre>"},{"location":"modules/#generate.is_sorted","title":"<code>is_sorted(t)</code>","text":"<p>Predicate to test whether an array is sorted in increasing order.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>NumPy array of Element</code> <p>An array of Element</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p><code>True</code> if the array is sorted, else <code>False</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy    \n&gt;&gt;&gt; is_sorted(numpy.array([1,2,3]))\nTrue\n&gt;&gt;&gt; is_sorted(numpy.array([1,3,2]))\nFalse\n</code></pre> Source code in <code>src/generate.py</code> <pre><code>def is_sorted(t):\n    \"\"\"\n    Predicate to test whether an array is sorted in increasing order.\n\n    Args:\n      t (NumPy array of Element): An array of Element\n\n    Returns:\n      bool: `True` if the array is sorted, else `False`\n\n    Examples:\n      &gt;&gt;&gt; import numpy    \n      &gt;&gt;&gt; is_sorted(numpy.array([1,2,3]))\n      True\n      &gt;&gt;&gt; is_sorted(numpy.array([1,3,2]))\n      False\n    \"\"\"\n    n = len(t)\n    i = 0\n    while i &lt; n-1 and t[i] &lt;= t[i+1]:\n        i = i + 1\n    return i == n - 1\n</code></pre>"},{"location":"modules/#generate.random_array","title":"<code>random_array(n)</code>","text":"<p>Creates a fresh array of Elements in pseudo-random order. Each Element from 0 to n-1 is present only once.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The length of the array</p> required <p>Returns:</p> Type Description <p>NumPy array: An array containing Elements between 0 and n-1</p> Example <p>sorted(random_array(3)) [0, 1, 2]</p> Source code in <code>src/generate.py</code> <pre><code>def random_array(n):\n    \"\"\"\n    Creates a fresh array of Elements in pseudo-random order. Each Element from\n    0 to n-1 is present only once.\n\n    Args:\n      n (int): The length of the array\n\n    Returns:\n      NumPy array: An array containing Elements between 0 and n-1\n\n    Example:\n      &gt;&gt;&gt; sorted(random_array(3))\n      [0, 1, 2]\n\n    \"\"\"\n    l = [Element(i) for i in range(n)]\n    random.shuffle(l)\n    return np.array(l)\n</code></pre>"},{"location":"modules/#module-sorting","title":"Module <code>Sorting</code>","text":"<p>Sorting functions module for quicksort assignment</p> Author <p>Dpt Informatique - FST - Univ. Lille 2018, january</p>"},{"location":"modules/#sorting.merge","title":"<code>merge(t1, t2, cmp)</code>","text":"<p>Given two sorted arrays, creates a fresh sorted array.</p> <p>Parameters:</p> Name Type Description Default <code>t1</code> <code>Array</code> <p>An array of objects</p> required <code>t2</code> <code>Array</code> <p>An array of objects</p> required <code>cmp</code> <code>function</code> <p>A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b</p> required Complexity <p>Time complexity of merge is \\(O(n_1+n_2)\\) with \\(n_1\\) and \\(n_2\\) resp. the length of <code>t1</code> and <code>t2</code></p> <p>Returns:</p> Name Type Description <code>Array</code> <p>A fresh array, sorted.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import numpy\n&gt;&gt;&gt; def cmp (x,y): \n...    if x == y:\n...       return 0\n...    elif x &lt; y:\n...       return -1\n...    else:\n...       return 1\n&gt;&gt;&gt; t1 = numpy.array([0,2,5,6])\n&gt;&gt;&gt; t2 = numpy.array([1,3,4])\n&gt;&gt;&gt; merge(t1,t2,cmp)\narray([0, 1, 2, 3, 4, 5, 6])\n</code></pre> Source code in <code>src/sorting.py</code> <pre><code>def merge (t1,t2, cmp):\n    \"\"\"\n    Given two sorted arrays, creates a fresh sorted array.\n\n    Args:\n      t1 (Array): An array of objects\n      t2 (Array): An array of objects\n      cmp (function): A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b\n\n    Note: Complexity\n          Time complexity of merge is $O(n_1+n_2)$ with\n          $n_1$ and $n_2$ resp. the length of `t1` and `t2`\n\n    Returns:\n      Array: A fresh array, sorted.\n\n    Examples:\n      &gt;&gt;&gt; import numpy\n      &gt;&gt;&gt; def cmp (x,y): \n      ...    if x == y:\n      ...       return 0\n      ...    elif x &lt; y:\n      ...       return -1\n      ...    else:\n      ...       return 1\n      &gt;&gt;&gt; t1 = numpy.array([0,2,5,6])\n      &gt;&gt;&gt; t2 = numpy.array([1,3,4])\n      &gt;&gt;&gt; merge(t1,t2,cmp)\n      array([0, 1, 2, 3, 4, 5, 6])\n    \"\"\"\n    n1 = len(t1)\n    n2 = len(t2)\n    t = np.zeros(n1+n2,dtype=type(t1[0]))\n    i = j = k = 0\n    while i &lt; n1 and j &lt; n2:\n        if cmp(t1[i],t2[j]) &lt; 0:\n            t[k] = t1[i]\n            i = i + 1\n        else:\n            t[k] = t2[j]\n            j = j + 1\n        k = k + 1\n    while i &lt; n1:\n        t[k] = t1[i]\n        i = i + 1\n        k = k + 1\n    while j &lt; n2:\n        t[k] = t2[j]\n        j = j + 1\n        k = k + 1\n    return t\n</code></pre>"},{"location":"modules/#sorting.merge_sort","title":"<code>merge_sort(t, cmp)</code>","text":"<p>A sorting function implementing the merge sort algorithm</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Array</code> <p>An array of integers</p> required <code>cmp</code> <code>function</code> <p>A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b</p> required <p>Returns:</p> Name Type Description <code>Array</code> <p>A fresh array, sorted.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import generate\n&gt;&gt;&gt; def cmp_element (x,y): \n...    return x.cmp(y)\n&gt;&gt;&gt; t = generate.random_array(10)\n&gt;&gt;&gt; merge_sort(t,cmp_element)\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=object)\n</code></pre> Source code in <code>src/sorting.py</code> <pre><code>def merge_sort (t,cmp):\n    \"\"\"\n    A sorting function implementing the merge sort algorithm\n\n    Args:\n      t (Array): An array of integers\n      cmp (function): A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b\n\n    Returns:\n      Array: A fresh array, sorted.\n\n    Examples:\n      &gt;&gt;&gt; import generate\n      &gt;&gt;&gt; def cmp_element (x,y): \n      ...    return x.cmp(y)\n      &gt;&gt;&gt; t = generate.random_array(10)\n      &gt;&gt;&gt; merge_sort(t,cmp_element)\n      array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=object)\n    \"\"\"\n    n = len(t)\n    if n &lt;= 1:\n        # cas de base\n        return copy.deepcopy(t)\n    else:\n        # cas general\n        t1 = merge_sort((t[0:((n-1)//2+1)]),cmp)\n        t2 = merge_sort((t[((n-1)//2+1):n]),cmp)\n        return merge(t1,t2,cmp)\n</code></pre>"},{"location":"modules/#sorting.naive_pivot","title":"<code>naive_pivot(s)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>s</code> <code>dict</code> <p>A slice of an array, that is a dictionary with 3 fields :         <code>data</code>, <code>left</code>, <code>right</code> representing resp. an array of objects and left          and right bounds of the slice.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>a position for the pivot. Systematically returns the first position    of the slice as a naive choice.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; s = {'data': None, 'left': 2, 'right': 10}\n&gt;&gt;&gt; naive_pivot(s)\n2\n&gt;&gt;&gt; s = {'data': None, 'left': 3, 'right': 10}\n&gt;&gt;&gt; naive_pivot(s)\n3\n</code></pre> Source code in <code>src/sorting.py</code> <pre><code>def naive_pivot(s):\n    '''\n    Args:\n      s (dict): A slice of an array, that is a dictionary with 3 fields :\n                `data`, `left`, `right` representing resp. an array of objects and left\n                 and right bounds of the slice.\n\n    Returns:\n      int: a position for the pivot. Systematically returns the first position\n           of the slice as a naive choice.\n\n    Examples:\n      &gt;&gt;&gt; s = {'data': None, 'left': 2, 'right': 10}\n      &gt;&gt;&gt; naive_pivot(s)\n      2\n      &gt;&gt;&gt; s = {'data': None, 'left': 3, 'right': 10}\n      &gt;&gt;&gt; naive_pivot(s)\n      3\n    '''\n    pass\n</code></pre>"},{"location":"modules/#sorting.partition","title":"<code>partition(s, cmp, pivot_pos)</code>","text":"<p>Creates two slices from <code>s</code> by selecting in the first slice all elements that are lower than the pivot and in the second one all the other elements.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>dict</code> <p>A slice represented as a dictionary with 3 fields :</p> <ul> <li><code>data</code>: the array of objects,</li> <li><code>left</code>: left bound of the slice (a position in the array),</li> <li><code>right</code>: right bound of the slice.</li> </ul> required <code>cmp</code> <code>function</code> <p>A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b</p> required <code>pivot_pos</code> <code>int</code> <p>The position at which we take the pivot in <code>s['data']</code></p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A couple of slices, the first slice contains all elements that are </p> <p>less than the pivot, the second one contains all elements that are </p> <p>greater than the pivot, the pivot does not belong to any slice.</p> <p>At the end, in the array the pivot is after the left slice and before </p> <p>the right slice.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import generate\n&gt;&gt;&gt; import element\n&gt;&gt;&gt; import numpy\n&gt;&gt;&gt; def cmp (x,y): \n...    if x == y:\n...       return 0\n...    elif x &lt; y:\n...       return -1\n...    else:\n...       return 1\n&gt;&gt;&gt; t = numpy.array([element.Element(i) for i in [5, 6, 1, 3, 4, 9, 8, 2, 7]])\n&gt;&gt;&gt; p = {'left':0,'right':len(t)-1,'data':t}\n&gt;&gt;&gt; p1,p2 = partition(p,cmp,0)\n&gt;&gt;&gt; list(p1['data'][p1['left']:p1['right']+1])\nNone\n&gt;&gt;&gt; list(p2['data'][p2['left']:p2['right']+1])\nNone\n</code></pre> Attention <p>FINIR D'\u00c9CRIRE LES DOCTESTS</p> <ul> <li>Remplacer <code>None</code> par la valeur attendue</li> <li>Rajouter des tests</li> </ul> Source code in <code>src/sorting.py</code> <pre><code>def partition (s, cmp, pivot_pos):\n    \"\"\"\n    Creates two slices from `s` by selecting in the first slice all\n    elements that are lower than the pivot and in the second one all the other\n    elements.\n\n    Args:\n      s (dict): A slice represented as a dictionary with 3 fields :\n\n          * `data`: the array of objects,\n          * `left`: left bound of the slice (a position in the array),\n          * `right`: right bound of the slice.\n      cmp (function): A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b\n      pivot_pos (int): The position at which we take the pivot in `s['data']`\n\n    Returns:\n      tuple: A couple of slices, the first slice contains all elements that are \n      less than the pivot, the second one contains all elements that are \n      greater than the pivot, the pivot does not belong to any slice.\n      At the end, in the array the pivot is after the left slice and before \n      the right slice.\n\n    Examples:\n      &gt;&gt;&gt; import generate\n      &gt;&gt;&gt; import element\n      &gt;&gt;&gt; import numpy\n      &gt;&gt;&gt; def cmp (x,y): \n      ...    if x == y:\n      ...       return 0\n      ...    elif x &lt; y:\n      ...       return -1\n      ...    else:\n      ...       return 1\n      &gt;&gt;&gt; t = numpy.array([element.Element(i) for i in [5, 6, 1, 3, 4, 9, 8, 2, 7]])\n      &gt;&gt;&gt; p = {'left':0,'right':len(t)-1,'data':t}\n      &gt;&gt;&gt; p1,p2 = partition(p,cmp,0)\n      &gt;&gt;&gt; list(p1['data'][p1['left']:p1['right']+1])\n      None\n      &gt;&gt;&gt; list(p2['data'][p2['left']:p2['right']+1])\n      None\n\n    Warning: Attention\n             **FINIR D'\u00c9CRIRE LES DOCTESTS**\n\n             * Remplacer `None` par la valeur attendue\n             * Rajouter des tests\n    \"\"\"  \n    return (None,None)\n</code></pre>"},{"location":"modules/#sorting.quicksort","title":"<code>quicksort(t, cmp)</code>","text":"<p>A sorting function implementing the quicksort algorithm on the whole array <code>t</code>.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Array</code> <p>An array of Element</p> required <code>cmp</code> <code>function</code> <p>A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b</p> required <p>Returns: Nothing</p> Note <p><code>t</code> is modified during the sort process</p> Attention <p>\u00c9CRIRE LES DOCTESTS</p> Source code in <code>src/sorting.py</code> <pre><code>def quicksort (t, cmp):\n    \"\"\"\n    A sorting function implementing the quicksort algorithm on the whole array `t`.\n\n    Args:\n      t (Array): An array of Element\n      cmp (function: A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b\n\n    **Returns:** Nothing\n\n    Note:\n          `t` is modified during the sort process\n\n    Warning: Attention\n             **\u00c9CRIRE LES DOCTESTS**\n    \"\"\"\n    pass\n</code></pre>"},{"location":"modules/#sorting.quicksort_slice","title":"<code>quicksort_slice(s, cmp)</code>","text":"<p>A sorting function implementing the quicksort algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>s</code> <code>dict</code> <p>A slice of an array, that is a dictionary with 3 fields :         <code>data</code>, <code>left</code>, <code>right</code> representing resp. an array of objects and left          and right bounds of the slice.</p> required <code>cmp</code> <code>function</code> <p>A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b</p> required <p>Returns: Nothing</p> Attention <p>\u00c9CRIRE LES DOCTESTS</p> Source code in <code>src/sorting.py</code> <pre><code>def quicksort_slice (s, cmp):\n    \"\"\"\n    A sorting function implementing the quicksort algorithm.\n\n    Args:\n      s (dict): A slice of an array, that is a dictionary with 3 fields :\n                `data`, `left`, `right` representing resp. an array of objects and left\n                 and right bounds of the slice.\n      cmp (function): A comparison function, returning 0 if a == b, -1 is a &lt; b, 1 if a &gt; b\n\n    **Returns:** Nothing\n\n    Warning: Attention\n             **\u00c9CRIRE LES DOCTESTS**\n    \"\"\"\n    pass\n</code></pre>"},{"location":"modules/#module-test","title":"Module <code>Test</code>","text":"<p>Test module for quicksort assignment</p> Author <p>Dpt Informatique - FST - Univ. Lille 2018, january</p>"},{"location":"modules/#src.test.cmp","title":"<code>cmp(a, b)</code>","text":"<p>A comparison function</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Element</code> <p>First element    </p> required <code>b</code> <code>Element</code> <p>Second element</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>0 if a == b, 1 if a &gt; b, -1 if a &lt; b</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from element import Element\n&gt;&gt;&gt; cpt = 0\n&gt;&gt;&gt; cmp(Element(10),Element(5))\n1\n&gt;&gt;&gt; cmp(Element(5),Element(5))\n0\n&gt;&gt;&gt; cmp(Element(5),Element(10))\n-1\n</code></pre> Source code in <code>src/test.py</code> <pre><code>def cmp(a,b):\n    \"\"\"\n    A comparison function\n\n    Args:\n      a (Element): First element    \n      b (Element): Second element\n\n    Returns:\n      int: 0 if a == b, 1 if a &gt; b, -1 if a &lt; b\n\n    Examples:\n      &gt;&gt;&gt; from element import Element\n      &gt;&gt;&gt; cpt = 0\n      &gt;&gt;&gt; cmp(Element(10),Element(5))\n      1\n      &gt;&gt;&gt; cmp(Element(5),Element(5))\n      0\n      &gt;&gt;&gt; cmp(Element(5),Element(10))\n      -1\n    \"\"\"\n    global cpt\n    cpt = cpt + 1\n    return Element.cmp(a,b)\n</code></pre>"}]}